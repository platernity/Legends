/****************************************
*	MapType for TjostArena				*
*	Author:		Platernity				*
*	BasedOn:	TJost by Steeffeen			*
*	Contact:	Platernity@hotmail.fr		*
****************************************/

#RequireContext CSmMapType

#Const	Version	"1.0"

#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor

#Const Rules """You must place exactly one of each Spawn and Goal, while:
- Spawn $<$00fTeam#1$> captures at Goal $<$00fTeam#1$>
- Spawn $<$f00Team#2$> captures at Goal $<$f00Team#2$>"""

// Check if the map is valid
Void UpdateValidability() {
	ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
	Anchor::UpdateAnchorCounts();
	
	// Check for needed spawns and goals
	for (I, 1, 2) {
		if (!Anchor::HasExactlyOneAnchor("Goal", I, "You must place exactly 1 Goals Team#"^I^"!")) {
			return;
		}
		if (!Anchor::HasExactlyOneAnchor("Spawn", I, "You must place exactly 1 Spawns Team#"^I^"!")) {
			return;
		}
	}
	
	// Check for unused spawns and goals
	foreach (Anchor in AnchorData) {
		if (Anchor.Order != 1 && Anchor.Order != 2) {
			ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
			ValidabilityRequirementsMessage = """You have at least one unused {{{Anchor.Tag}}}!""";
			return;
		}
	}
	
	ValidationStatus = CSmMapType::ValidationStatus::Validated;
	ValidabilityRequirementsMessage = "";
}

// Return the manialink for spawn anchor edition
Text EditSpawnAnchorManialink(Ident _EditedAnchorDataId) {
	declare MLText = 		
	"""
	<script><!--
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib
		
		main() {
			declare Buttons = [
				(Page.GetFirstChild("1") as CMlLabel), 
				(Page.GetFirstChild("2") as CMlLabel)];
			
			declare Text AnchorTag for Page;
			declare Integer AnchorOrder for Page;
			declare Boolean Finish for Page;
			
			Finish = False;	
			while (!Finish) {
				yield;
				
				foreach (Button in Buttons) {
					if (AnchorOrder == TextLib::ToInteger(Button.ControlId) || AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							switch (Event.ControlId) {
								case "Cancel": {
								}
								default: {
									AnchorTag = "Spawn";
									AnchorOrder = TextLib::ToInteger(Event.ControlId);
								}
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 40">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fffEdit Spawn"/>
		
		<quad posn="0 0 -1" sizen="68 25" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -4">
			<label id="1" posn="-5 0" scale="2.5" halign="right" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="2" posn="5 0" scale="2.5" halign="left" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="Cancel" text="Cancel" posn="0 -11" halign="center" style="CardButtonSmall" ScriptEvents="true"/>
		</frame>
    </frame>
	<frame posn="120 -3">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fffRules"/>
		
		<quad posn="0 0 -1" sizen="68 25" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="-30 -3">
			<label posn="0 0" sizen="60 5" autonewline="1" style="TextCardSmallScores2" text="$333{{{Rules}}}"/>
		</frame>
	</frame>
	""";
  
	return MLText;
}

// Return the manialink for goal anchor edition
Text EditGoalAnchorManialink(Ident _EditedAnchorDataId) {
	declare MLText = 		
	"""
	<script><!--
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib
		
		main() {
			declare Buttons = [
				(Page.GetFirstChild("1") as CMlLabel),
				(Page.GetFirstChild("2") as CMlLabel)];
			
			declare Text AnchorTag for Page;
			declare Integer AnchorOrder for Page;
			declare Boolean Finish for Page;
			
			Finish = False;	
			while (!Finish) {
				yield;
				
				foreach (Button in Buttons) {
					if (AnchorOrder == TextLib::ToInteger(Button.ControlId) || AnchorTag == Button.ControlId) {
						Button.Value = "$090"^Button.ControlId;
					} else {
						Button.Value = "$fff"^Button.ControlId;
					}
				}
				
				foreach (Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							switch (Event.ControlId) {
								case "Cancel": {
								}
								default: {
									AnchorTag = "Goal";
									AnchorOrder = TextLib::ToInteger(Event.ControlId);
								}
							}
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 40">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fffEdit Goal"/>
		
		<quad posn="0 0 -1" sizen="68 25" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="0 -4">
			<label id="1" posn="-5 0" scale="2.5" halign="right" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="2" posn="5 0" scale="2.5" halign="left" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="Cancel" text="Cancel" posn="0 -11" halign="center" style="CardButtonSmall" ScriptEvents="true"/>
		</frame>
    </frame>
	<frame posn="120 -3">
		<quad posn="0 0 2" sizen="72 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fffRules"/>
		
		<quad posn="0 0 -1" sizen="68 25" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="-30 -3">
			<label posn="0 0" sizen="60 5" autonewline="1" style="TextCardSmallScores2" text="$333{{{Rules}}}"/>
		</frame>
	</frame>
	""";
  
	return MLText;
}

// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {
	UpdateValidability();

	declare Text AnchorTag for ManialinkPage;
	declare Integer AnchorOrder for ManialinkPage;
	declare Boolean Finish for ManialinkPage;
	
	switch (AnchorData[_EditedAnchorDataId].DefaultTag) {
		case "Spawn": {
			ManialinkText = EditSpawnAnchorManialink(_EditedAnchorDataId);
		}
		case "Goal": {
			ManialinkText = EditGoalAnchorManialink(_EditedAnchorDataId);
		}
		case "Checkpoint": {
			ManialinkText = EditGoalAnchorManialink(_EditedAnchorDataId);
		}
		default: {
			return;
		}
	}
	AnchorTag = AnchorData[_EditedAnchorDataId].Tag;
	AnchorOrder = AnchorData[_EditedAnchorDataId].Order;
	
	Finish = False;
	while (!Finish) {
		yield;
	}
	
	AnchorData[_EditedAnchorDataId].Tag = AnchorTag;
	AnchorData[_EditedAnchorDataId].Order = AnchorOrder;
	
	UpdateValidability();
}

// Sets default values for newly placed blocks
Void OnMapModified() {
	declare CAnchorData[] NewAnchors;
	declare ClanSpawns = [1 => False, 2 => False];
	declare ClanPoles = [1 => False, 2 => False];
	
	// Check for existence of spawns and goals
	foreach (AnchorId => Anchor in AnchorData) {
		if (Anchor.Order == 1 || Anchor.Order == 2) {
			switch (Anchor.DefaultTag) {
				case "Spawn": {
					ClanSpawns[Anchor.Order] = True;
				}
				case "Goal": {
					ClanPoles[Anchor.Order] = True;
				}
			}
		} else {
			NewAnchors.add(Anchor);
		}
	}
	
	// Set default values for new anchors
	foreach (Anchor in NewAnchors) {
		for (Clan, 1, 2) {
			switch (Anchor.DefaultTag) {
				case "Spawn": {
					if (!ClanSpawns[Clan]) {
						Anchor.Order = Clan;
						ClanSpawns[Clan] = True;
						break;
					}
				}
				case "Goal": {
					if (!ClanPoles[3-Clan]) {
						Anchor.Order = 3-Clan;
						ClanPoles[3-Clan] = True;
						break;
					}
				}
			}
		}
	}
}

// Main
main() {
	CustomEditAnchorData = True;
	declare metadata Text ScriptVersion for Map;
	ScriptVersion = Version;
	
	UpdateValidability();
	
	while (True) {
		yield;
		
		ManialinkText = "";
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified: {
					OnMapModified();
					UpdateValidability();
				}
				case CPluginEvent::Type::EditAnchor: {
					EditAnchorData(Event.EditedAnchorDataId);
				}
				case CPluginEvent::Type::StartValidation: {
					StartTestMapWithMode("Legends.Script.txt");
				}
			}
		}		
	}	
}
